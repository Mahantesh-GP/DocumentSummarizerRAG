
//. Define a Table Entity (SoftDeleteEntry.cs)
using Azure;
using Azure.Data.Tables;
using System;

public class SoftDeleteEntry : ITableEntity
{
    public string PartitionKey { get; set; } // AppId
    public string RowKey { get; set; }       // Unique document ID (e.g., blobPath or chunk_id)

    public DateTime DeletedOn { get; set; }
    public string DeletedBy { get; set; }

    public ETag ETag { get; set; }
    public DateTimeOffset? Timestamp { get; set; }
}


// service
private readonly TableClient _tableClient;


public DocumentController(IConfiguration config)
{
    var connectionString = config["AzureStorageConnection"];
    _tableClient = new TableClient(connectionString, "SoftDeleteLog");
    _tableClient.CreateIfNotExists();
}


///
[HttpPost("soft-delete")]
public async Task<IActionResult> SoftDeleteDocument([FromBody] SoftDeleteEntry request)
{
    request.DeletedOn = DateTime.UtcNow;
    request.ETag = ETag.All;

    await _tableClient.UpsertEntityAsync(request);
    return Ok("Soft deleted successfully.");
}


////
[HttpPost("search")]
public async Task<IActionResult> Search([FromBody] SearchPayload payload)
{
    var deletedIds = _tableClient.Query<SoftDeleteEntry>(e => e.PartitionKey == payload.AppId)
        .Select(e => e.RowKey)
        .ToHashSet();

    var searchResults = await _searchClient.SearchAsync<SearchDocument>(payload.Query, new SearchOptions
    {
        SearchFields = { "chunk", "title", "policyNumber" },
        Size = 20
    });

    var filteredResults = searchResults.Value.GetResults()
        .Where(r => !deletedIds.Contains(r.Document["chunk_id"]?.ToString()));

    return Ok(filteredResults);
}


//

<button @onclick="() => ConfirmDelete(doc)" class="btn btn-sm btn-outline-danger">
    <i class="bi bi-trash"></i>
</button>


private async Task ConfirmDelete(DocumentRag doc)
{
    var payload = new SoftDeleteEntry
    {
        PartitionKey = doc.AppId,
        RowKey = doc.DocumentId, // or blobPath/chunk_id
        DeletedBy = "user@example.com"
    };

    var response = await Http.PostAsJsonAsync("api/documents/soft-delete", payload);

    if (response.IsSuccessStatusCode)
    {
        await LoadSearchResults(); // refresh results
    }
}

//sodtdelete.razor

<button @onclick="TriggerDelete" class="btn btn-sm btn-outline-danger" title="Delete">
    <i class="bi bi-trash"></i>
</button>

@code {
    [Parameter] public string AppId { get; set; }
    [Parameter] public string DocumentId { get; set; }
    [Parameter] public EventCallback OnDeleted { get; set; }

    [Inject] public HttpClient Http { get; set; }

    private async Task TriggerDelete()
    {
        var payload = new SoftDeleteEntry
        {
            PartitionKey = AppId,
            RowKey = DocumentId,
            DeletedOn = DateTime.UtcNow,
            DeletedBy = "user@example.com"
        };

        var response = await Http.PostAsJsonAsync("api/documents/soft-delete", payload);
        if (response.IsSuccessStatusCode)
        {
            if (OnDeleted.HasDelegate)
                await OnDeleted.InvokeAsync(null);
        }
    }
}

public class SoftDeleteEntry
{
    public string PartitionKey { get; set; }  // AppId
    public string RowKey { get; set; }        // DocumentId or blobPath
    public DateTime DeletedOn { get; set; }
    public string DeletedBy { get; set; }
}


@foreach (var doc in SearchResults)
{
    <div class="d-flex justify-content-between">
        <div>
            <h6>@doc.Document["title"]</h6>
            <p>@doc.Document["chunk"]?.ToString()?.Substring(0, 150)...</p>
        </div>
        <SoftDeleteButton AppId="@doc.AppId" DocumentId="@doc.DocumentId" OnDeleted="ReloadResults" />
    </div>
}


<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">



@if (showDeleteConfirmation)
{
    <div class="modal fade show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this document?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private bool showDeleteConfirmation = false;
    private string selectedBlobUrlToDelete;

    void PromptDelete(string blobUrl)
    {
        selectedBlobUrlToDelete = blobUrl;
        showDeleteConfirmation = true;
    }

    void CancelDelete()
    {
        showDeleteConfirmation = false;
        selectedBlobUrlToDelete = null;
    }

    async Task ConfirmDelete()
    {
        showDeleteConfirmation = false;

        if (!string.IsNullOrEmpty(selectedBlobUrlToDelete))
        {
            await AzureStorageService.SoftDeleteAsync(selectedBlobUrlToDelete);
            // Optionally reload or refresh document list
        }
    }
}

<button class="btn btn-sm btn-danger" title="Delete"
        @onclick="() => PromptDelete(document.BlobUrl)">
    <i class="fas fa-trash"></i>
</button>
