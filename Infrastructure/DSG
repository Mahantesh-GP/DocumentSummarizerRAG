using Azure;
using Azure.AI.OpenAI;
using Azure.Search.Documents;
using Azure.Search.Documents.Models;
using Microsoft.Extensions.Configuration;

public class AzureSearchService
{
    private readonly IConfiguration _config;
    private readonly SearchClient _searchClient;
    private readonly OpenAIClient _openAiClient;

    public AzureSearchService(IConfiguration config)
    {
        _config = config;
        _searchClient = new SearchClient(
            new Uri(_config["AZURE_SEARCH_ENDPOINT"]!),
            _config["DEFAULT_INDEX"] ?? "document-index",
            new AzureKeyCredential(_config["AZURE_SEARCH_KEY"]!));

        _openAiClient = new OpenAIClient(
            new Uri(_config["AZURE_OPENAI_ENDPOINT"]!),
            new AzureKeyCredential(_config["AZURE_OPENAI_KEY"]!));
    }

    public async Task<IEnumerable<object>> RunHybridSearchAsync(SearchRequest request)
    {
        var embedding = await GetEmbeddingAsync(request.Query);

        var options = new SearchOptions
        {
            QueryType = SearchQueryType.Semantic,
            SemanticConfigurationName = request.SemanticConfiguration,
            QueryAnswer = QueryAnswer.Generative,
            Size = 20,
            VectorSearch = new VectorSearch
            {
                Queries =
                {
                    new VectorQuery
                    {
                        Fields = { "contentVector" },
                        Value = embedding,
                        KNearestNeighborsCount = 10
                    }
                }
            }
        };

        var filters = new List<string>();
        if (!string.IsNullOrEmpty(request.AppId))
            filters.Add($"appId eq '{request.AppId}'");
        if (!string.IsNullOrEmpty(request.PropertyKey))
            filters.Add($"propertyKey eq '{request.PropertyKey}'");
        if (!string.IsNullOrEmpty(request.DocumentType))
            filters.Add($"documentType eq '{request.DocumentType}'");

        if (filters.Any())
            options.Filter = string.Join(" and ", filters);

        var response = await _searchClient.SearchAsync<SearchDocument>(request.Query, options);
        return response.Value.GetResults().Select(r => new
        {
            Document = r.Document,
            Highlights = r.Highlights,
            RerankerScore = r.RerankerScore,
            Answer = r.Answer
        });
    }

    private async Task<IReadOnlyList<float>> GetEmbeddingAsync(string query)
    {
        var response = await _openAiClient.GetEmbeddingsAsync("text-embedding-ada-002", new EmbeddingsOptions(query));
        return response.Value.Data[0].Embedding;
    }
}

public class SearchRequest
{
    public string Query { get; set; }
    public string AppId { get; set; }
    public string PropertyKey { get; set; }
    public string DocumentType { get; set; }
    public string IndexName { get; set; } = "document-index";
    public string SemanticConfiguration { get; set; } = "default";
}
