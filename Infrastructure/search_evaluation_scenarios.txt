# CONFIGURATION
$searchServiceName = "<your-search-service-name>"
$apiKey = "<your-admin-api-key>"
$apiVersion = "2023-07-01"
$endpoint = "https://$searchServiceName.search.windows.net"

# 1. Create Synonym Map
$body = @{
    name = "name-synonyms"
    format = "solr"
    synonyms = @"
william, bill
robert, bob
john, jack, johnny
margaret, maggie, meg
steven, steve
james, jim, jimmy
richard, rick, ricky
joseph, joe
katherine, kate, kathy
"@
} | ConvertTo-Json -Depth 3 -Compress

Invoke-RestMethod -Method PUT `
  -Uri "$endpoint/synonymmaps/name-synonyms?api-version=$apiVersion" `
  -Headers @{ "api-key" = $apiKey; "Content-Type" = "application/json" } `
  -Body $body

Write-Host "âœ… Synonym map created"

-----------------------

{
  "fields": [
    { "name": "id", "type": "Edm.String", "key": true },
    { "name": "name", "type": "Edm.String", "searchable": true },
    { "name": "normalizedName", "type": "Edm.String", "searchable": true },
    { "name": "phoneticName", "type": "Edm.String", "searchable": true },
    { "name": "nicknames", "type": "Collection(Edm.String)", "searchable": true }
  ]
}




---------------------------

SKILLSET
{
  "name": "name-enrichment-skillset",
  "skills": [
    {
      "@odata.type": "#Microsoft.Skills.Custom.WebApiSkill",
      "name": "name-enrichment",
      "uri": "https://<your-function-app>.azurewebsites.net/api/NameEnricherSkill",
      "httpMethod": "POST",
      "inputs": [
        { "name": "name", "source": "/document/name" }
      ],
      "outputs": [
        { "name": "normalizedName", "targetName": "normalizedName" },
        { "name": "phoneticName", "targetName": "phoneticName" },
        { "name": "nicknames", "targetName": "nicknames" }
      ]
    }
  ]
}


--------INDEXER
{
  "name": "people-indexer",
  "dataSourceName": "people-datasource",
  "targetIndexName": "people-index",
  "skillsetName": "name-skillset",
  "schedule": {
    "interval": "PT1H",
    "startTime": "2024-01-01T00:00:00Z"
  },
  "fieldMappings": [
    {
      "sourceFieldName": "id",
      "targetFieldName": "id"
    },
    {
      "sourceFieldName": "fullName",
      "targetFieldName": "fullName"
    }
  ],
  "outputFieldMappings": [
    {
      "sourceFieldName": "/document/phoneticName",
      "targetFieldName": "phoneticName"
    }
  ]
}


-----------------------------
Install-Package Lucene.Net.Analysis.Phonetic -Version 4.8.0-beta00016


using Lucene.Net.Analysis.Phonetic.Language;

public static class PhoneticHelper
{
    public static (string primary, string alternate) ComputePhonetic(string input)
    {
        var encoder = new DoubleMetaphone();
        encoder.MaxCodeLen = 4;

        var primary = encoder.DoubleMetaphone(input);
        var alternate = encoder.DoubleMetaphone(input, true);

        return (primary, alternate);
    }
}


---------------------------------
BUILD QUERY
public static class AzureSearchQueryBuilder
{
    public static string BuildQuery(string userInput)
    {
        // 1. Fuzzy search
        var fuzzy = $"{userInput}~";

        // 2. Phonetic keys
        var (primary, alternate) = PhoneticHelper.ComputePhonetic(userInput);

        // 3. Build combined query
        var query = $"{fuzzy} OR phonetic_primary:{primary} OR phonetic_alternate:{alternate}";

        return query;
    }
}

---------------------------AZURE FUNCTION

dotnet add package Phonix


public static class NameEnricherSkill
{
    [FunctionName("NameEnricherSkill")]
    public static async Task<HttpResponseMessage> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post")] HttpRequestMessage req,
        ILogger log)
    {
        string jsonContent = await req.Content.ReadAsStringAsync();
        var input = JsonConvert.DeserializeObject<SkillRequest>(jsonContent);
        var results = new List<SkillResponseRecord>();

        foreach (var record in input.Values)
        {
            var name = record.Data["name"]?.ToString() ?? "";

            results.Add(new SkillResponseRecord
            {
                RecordId = record.RecordId,
                Data = new Dictionary<string, object>
                {
                    ["normalizedName"] = NormalizeName(name),
                    ["phoneticName"] = ComputePhoneticName(name),
                    ["nicknames"] = GetNicknames(name)
                }
            });
        }

        var response = new SkillResponse { Values = results };
        return req.CreateResponse(HttpStatusCode.OK, response);
    }

    private static string NormalizeName(string name) =>
        Regex.Replace(name.ToLower().Trim(), @"[^\w\s]", "");

    private static string ComputePhoneticName(string name)
    {
        var encoder = new DoubleMetaphone();
        return string.Join("|", new[] { encoder.Encode(name), encoder.EncodeAlternate(name) });
    }

    private static List<string> GetNicknames(string name)
    {
        var nicknameDict = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase)
        {
            { "John", new() { "Johnny", "Jon", "Jack" } },
            { "David", new() { "Dave", "Davy" } },
            { "Jack", new() { "Jackie", "Jackson" } },
            { "William", new() { "Will", "Bill", "Billy" } }
        };

        return nicknameDict.TryGetValue(name, out var list) ? list : new List<string>();
    }
}


public class EnrichedName
{
    public string Name { get; set; }
    public string PhoneticName { get; set; }
    public List<string> Nicknames { get; set; }
    public string NormalizedName { get; set; }
}

[Function("NameSkill")]
public static async Task<HttpResponseData> Run(
    [HttpTrigger(AuthorizationLevel.Function, "post")] HttpRequestData req)
{
    var requestBody = await new StreamReader(req.Body).ReadToEndAsync();
    var data = JsonSerializer.Deserialize<Dictionary<string, string>>(requestBody);
    var name = data["name"];
    var flag = data["individualFlag"];

    var response = req.CreateResponse(HttpStatusCode.OK);
    response.Headers.Add("Content-Type", "application/json");

    if (flag != "I")
    {
        await response.WriteAsJsonAsync(new { name = name });
        return response;
    }

    var encoder = new DoubleMetaphone();
    var normalized = NormalizeName(name);
    var phonetic = encoder.Encode(normalized);
    var nicknames = GetNicknames(normalized);

    await response.WriteAsJsonAsync(new
    {
        name = name,
        phoneticName = phonetic,
        normalizedName = normalized,
        nicknames = nicknames
    });
    return response;
}


public static string NormalizeName(string name) =>
    name?.Trim().ToLowerInvariant();

public static List<string> GetNicknames(string name)
{
    var map = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase)
    {
        ["john"] = new() { "jon", "jonny", "jack", "jackie" },
        ["david"] = new() { "dave", "davie", "davy" },
        ["michael"] = new() { "mike", "micky" }
        // Extend this dictionary based on your dataset
    };

    return map.TryGetValue(name, out var result) ? result : new List<string>();
}

--------------------





public static async Task<HttpResponseMessage> Run(
    HttpRequestMessage req, ILogger log)
{
    var requestBody = await req.Content.ReadAsStringAsync();
    var input = JsonConvert.DeserializeObject<SkillRequest>(requestBody);

    var results = new List<SkillResponseRecord>();

    foreach (var record in input.Values)
    {
        try
        {
            var name = record.Data["name"]?.ToString();
            var flag = record.Data["IndividualFlag"]?.ToString();

            if (string.IsNullOrEmpty(name) || flag != "I")
            {
                results.Add(record.CreateEmptyOutput());
                continue;
            }

            var phonetic = ComputePhonetic(name);
            var nicknames = GetNicknames(name);

            results.Add(new SkillResponseRecord
            {
                RecordId = record.RecordId,
                Data = new Dictionary<string, object>
                {
                    ["normalizedName"] = NormalizeName(name),
                    ["phoneticName"] = phonetic,
                    ["nicknames"] = nicknames
                }
            });
        }
        catch (Exception ex)
        {
            results.Add(record.CreateErrorOutput(ex.Message));
        }
    }

    return req.CreateResponse(HttpStatusCode.OK, new { values = results });
}


https://stackoverflow.com/questions/58716612/how-can-i-best-leverage-azure-search-for-people-name-matching#:~:text=You%20could%20add%20the%20PhoneticTokenFilter%2C,performance%20for%20your%20specific%20case
