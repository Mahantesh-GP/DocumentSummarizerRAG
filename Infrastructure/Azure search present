
private static List<string> ExtractQueryRewritesFromJson(string json)
{
    var rewrites = new List<string>();
    try
    {
        using var doc = JsonDocument.Parse(json);
        if (doc.RootElement.TryGetProperty("Value", out var valueElement))
        {
            // Look for keywords in assistant response that resemble rewrites
            string content = valueElement.ToString();

            // Basic regex or manual parsing ‚Äî improve as needed
            var knownMarkers = new[] { "rewrites", "variants", "alternatives" };
            foreach (var marker in knownMarkers)
            {
                if (content.Contains(marker, StringComparison.OrdinalIgnoreCase))
                {
                    // Naive splitting (replace with proper JSON parsing if it's a real JSON list)
                    var matches = Regex.Matches(content, "\"(.*?)\"");
                    foreach (Match m in matches)
                    {
                        if (!string.IsNullOrWhiteSpace(m.Groups[1].Value))
                            rewrites.Add(m.Groups[1].Value);
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå Failed to extract query rewrites: {ex.Message}");
    }

    return rewrites.Distinct().ToList();
}


foreach (var activity in retrievalResult.Value.Activity)
{
    if (activity.GetType().Name == "KnowledgeAgentModelQueryPlanningActivityRecord")
    {
        var planningJson = JsonSerializer.Serialize(activity, new JsonSerializerOptions { WriteIndented = true });
        Console.WriteLine("üîç Query Planning Activity:");
        Console.WriteLine(planningJson);

        // Try to extract rewrites from the planning content if present
        var rewrites = ExtractQueryRewritesFromJson(planningJson);
        if (rewrites.Any())
        {
            var rewrittenLog = new
            {
                inputQuery = "<original user query here>", // Replace dynamically if needed
                rewrites = rewrites
            };

            Console.WriteLine("üß† Agent Query Rewrites:");
            Console.WriteLine(JsonSerializer.Serialize(rewrittenLog, new JsonSerializerOptions { WriteIndented = true }));
        }
    }
}


var rewrittenLog = new
{
    inputQuery = searchTerm,
    rewrites = rewrites
};
