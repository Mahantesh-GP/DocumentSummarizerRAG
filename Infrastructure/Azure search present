using System;
using System.IO;
using System.Text;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        string inputPath = "input.csv";
        string outputPath = "cleaned_output.csv";

        using var reader = new StreamReader(inputPath);
        using var writer = new StreamWriter(outputPath, false, Encoding.UTF8);

        int lineNumber = 0;

        while (!reader.EndOfStream)
        {
            var line = reader.ReadLine();
            lineNumber++;

            var columns = ParseCsvLine(line);

            if (columns.Length < 7)
            {
                Console.WriteLine($"⚠️ Line {lineNumber}: Expected 7 columns, found {columns.Length}. Skipping.");
                continue;
            }

            // Merge column 3 and 4 (index 2 and 3)
            var merged = columns[2] + " " + columns[3];

            // Build new row:
            // Keep: 0,1
            // Add: merged (replaces 2 and 3)
            // Add: 4,5,6
            var newRow = new[]
            {
                columns[0],
                columns[1],
                merged,
                columns[4],
                columns[5],
                columns[6]
            };

            writer.WriteLine(string.Join(",", newRow.Select(EscapeCsv)));
        }

        Console.WriteLine("✅ Cleaned CSV written to: " + outputPath);
    }

    static string[] ParseCsvLine(string line)
    {
        var result = new System.Collections.Generic.List<string>();
        bool inQuotes = false;
        var current = new StringBuilder();

        foreach (char c in line)
        {
            if (c == '"') inQuotes = !inQuotes;
            else if (c == ',' && !inQuotes)
            {
                result.Add(current.ToString());
                current.Clear();
            }
            else
                current.Append(c);
        }

        result.Add(current.ToString());
        return result.ToArray();
    }

    static string EscapeCsv(string value)
    {
        if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
        {
            value = value.Replace("\"", "\"\"");
            return $"\"{value}\"";
        }
        return value;
    }
}
