using System;
using System.IO;
using System.Text;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        string inputPath = "input.csv";       // Your input CSV
        string outputPath = "cleaned_output.csv"; // Cleaned output

        int expectedColumns = 4;

        using var reader = new StreamReader(inputPath);
        using var writer = new StreamWriter(outputPath, false, Encoding.UTF8);

        int lineNumber = 0;

        while (!reader.EndOfStream)
        {
            lineNumber++;
            var line = reader.ReadLine();

            // Split using CSV-safe method
            var columns = ParseCsvLine(line);

            if (columns.Length > expectedColumns)
            {
                // Keep first 3 columns, merge rest into last
                var fixedRow = columns.Take(expectedColumns - 1).ToList();
                var mergedLast = string.Join(",", columns.Skip(expectedColumns - 1));
                fixedRow.Add(mergedLast);

                writer.WriteLine(string.Join(",", fixedRow.Select(EscapeCsv)));
            }
            else
            {
                // Write as-is (also escapes values)
                writer.WriteLine(string.Join(",", columns.Select(EscapeCsv)));
            }
        }

        Console.WriteLine("âœ… Cleaned file saved to: " + outputPath);
    }

    // Simple CSV parser respecting quoted commas
    static string[] ParseCsvLine(string line)
    {
        var result = new List<string>();
        bool inQuotes = false;
        var current = new StringBuilder();

        foreach (char c in line)
        {
            if (c == '"')
                inQuotes = !inQuotes;
            else if (c == ',' && !inQuotes)
            {
                result.Add(current.ToString());
                current.Clear();
            }
            else
            {
                current.Append(c);
            }
        }
        result.Add(current.ToString()); // Add last value
        return result.ToArray();
    }

    // Escapes a value if needed
    static string EscapeCsv(string value)
    {
        if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
        {
            value = value.Replace("\"", "\"\"");
            return $"\"{value}\"";
        }
        return value;
    }
}
