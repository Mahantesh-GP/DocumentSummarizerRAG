private readonly List<ChatMessage> _chatHistory = new();

using Azure.AI.OpenAI;
using System.Text.Json;

public class AgenticChatService
{
    private readonly OpenAIClient _client;
    private readonly string _deployment;
    private readonly List<ChatMessage> _chatHistory = new();

    public AgenticChatService(OpenAIClient client, string deployment)
    {
        _client = client;
        _deployment = deployment;
    }

    public async Task<string> SendMessageAsync(string userMessage, object retrievalContext)
    {
        // Step 1: Add current user message to history
        _chatHistory.Add(new ChatMessage(ChatRole.User, userMessage));

        // Step 2: Prepare fixed system instruction
        var systemMessage = new ChatMessage(ChatRole.System, """
You are an AI assistant using retrieval-augmented generation.
Use the provided document context to answer the user's message.
Always respond in the following JSON format:
{
  "summary": "...",
  "keywords": ["...", "..."],
  "references": [
    { "file": "...", "ref_id": "..." }
  ]
}
Do not include markdown or any other formatting.
""");

        // Step 3: Include document retrieval context
        var contextJson = JsonSerializer.Serialize(retrievalContext, new JsonSerializerOptions
        {
            WriteIndented = false,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });

        var contextMessage = new ChatMessage(ChatRole.User, $"Context documents:\n{contextJson}");

        // Step 4: Add last 5 relevant chat messages
        var recentMessages = _chatHistory
            .Where(msg => msg.Role != ChatRole.System)
            .TakeLast(5)
            .ToList();

        // Step 5: Compose chat input
        var messages = new List<ChatMessage> { systemMessage, contextMessage };
        messages.AddRange(recentMessages);

        var chatOptions = new ChatCompletionsOptions
        {
            Temperature = 0.2f
        };

        foreach (var msg in messages)
            chatOptions.Messages.Add(msg);

        // Step 6: Call the assistant
        var result = await _client.GetChatCompletionsAsync(_deployment, chatOptions);
        var assistantReply = result.Value.Choices[0].Message.Content?.Trim();

        // Step 7: Add assistant reply to history
        _chatHistory.Add(new ChatMessage(ChatRole.Assistant, assistantReply));

        return assistantReply;
    }

    public void ClearHistory()
    {
        _chatHistory.Clear();
    }

    public List<ChatMessage> GetChatHistory()
    {
        return _chatHistory;
    }
}
