
private void ParseDateAndEqualityFilters(UserQueryRequest request, List<string> filters)
{
    string fieldName = null;

    // Step 1: Detect known field name from query
    foreach (var key in SupportedFieldMap.Keys)
    {
        if (request.Query.ToLower().Contains(key.ToLower()))
        {
            fieldName = SupportedFieldMap[key];
            break;
        }
    }

    if (string.IsNullOrEmpty(fieldName)) return;

    // Step 2: Regex filters for different expressions
    var patterns = new (string Label, string Pattern, Func<Match, string> FilterBuilder)[]
    {
        ("before", @"before\s+(\d{4})", m => $"{fieldName} lt {m.Groups[1].Value}-01-01T00:00:00Z"),
        ("older", @"older than\s+(\d+)\s*years?", m =>
        {
            var years = int.Parse(m.Groups[1].Value);
            var cutoff = DateTime.UtcNow.AddYears(-years).ToString("yyyy-MM-ddTHH:mm:ssZ");
            return $"{fieldName} lt {cutoff}";
        }),
        ("after", @"after\s+(\d{4})", m => $"{fieldName} ge {m.Groups[1].Value}-01-01T00:00:00Z"),
        ("greater", @"greater than\s+(\d+)\s*years?", m =>
        {
            var years = int.Parse(m.Groups[1].Value);
            var cutoff = DateTime.UtcNow.AddYears(-years).ToString("yyyy-MM-ddTHH:mm:ssZ");
            return $"{fieldName} gt {cutoff}";
        }),
        ("is", @"(?:is|equals)\s+(\w+)", m => $"{fieldName} eq '{m.Groups[1].Value}'")
    };

    foreach (var (label, pattern, builder) in patterns)
    {
        var match = Regex.Match(request.Query, pattern, RegexOptions.IgnoreCase);
        if (match.Success)
        {
            filters.Add(builder(match));
            request.Query = Regex.Replace(request.Query, pattern, "", RegexOptions.IgnoreCase);
            break;
        }
    }

    // Optional: support document ID filter separately
    if (!string.IsNullOrWhiteSpace(request.SelectedDocumentId))
    {
        filters.Add($"containerName eq '{request.SelectedDocumentId}'");
    }
}
private Dictionary<string, string> SupportedFieldMap = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
{
    { "order number", "orderNumber" },
    { "closing date", "closingDate" },
    { "policy date", "policyDate" },
    { "commitment date", "commitmentDate" }
};
