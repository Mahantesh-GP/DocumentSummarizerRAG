@page "/related-documents"
@inject HttpClient Http

<h1 class="mb-4 display-6 fw-bold text-primary">Related Document Search</h1>

<div class="input-group mb-4">
    <InputText class="form-control" @bind-Value="query" placeholder="Search by buyer, process ID, or keywords..." />
    <button class="btn btn-primary" @onclick="HandleSearch">Search</button>
</div>

@if (results != null)
{
    @foreach (var result in results)
    {
        <div class="card mb-4 border-primary">
            <div class="card-header bg-primary text-white">
                Process ID: <strong>@result.ProcessId</strong>
            </div>
            <div class="card-body">
                <h5 class="card-title">@result.Summary</h5>

                @foreach (var doc in result.Documents)
                {
                    <div class="card mb-3">
                        <div class="card-body d-flex justify-content-between align-items-center">
                            <div class="flex-grow-1">
                                <h6 class="mb-1">@doc.Name</h6>
                                <small class="text-muted">Type: <strong>@doc.Type</strong></small>
                                <div class="mt-1">
                                    @if (doc.IsReviewed)
                                    {
                                        <span class="badge bg-success me-2">Reviewed</span>
                                    }
                                    @if (doc.IsDeleted)
                                    {
                                        <span class="badge bg-danger">Deleted</span>
                                    }
                                </div>
                            </div>
                            <div class="ms-3 text-end">
                                <button class="btn btn-link btn-sm text-decoration-none" @onclick="() => ShowPreview(doc.Url)">View</button>
                                <button class="btn btn-success btn-sm me-2" @onclick="() => UpdateStatus(doc, true)">Keep</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteDocumentAsync(doc)">Delete</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}

@if (!string.IsNullOrEmpty(previewUrl))
{
    <div class="modal d-block bg-dark bg-opacity-50" tabindex="-1">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Document Preview</h5>
                    <button type="button" class="btn-close" @onclick="() => previewUrl = null"></button>
                </div>
                <div class="modal-body" style="height:80vh">
                    <iframe src="@previewUrl" class="w-100 h-100 border-0"></iframe>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string query;
    private List<RelatedDocGroup> results;
    private string previewUrl;

    private async Task HandleSearch()
    {
        results = await Http.GetFromJsonAsync<List<RelatedDocGroup>>("api/search?query=" + Uri.EscapeDataString(query));
    }

    private async Task DeleteDocumentAsync(RelatedDoc doc)
    {
        var response = await Http.DeleteAsync($"api/document?blobUrl={Uri.EscapeDataString(doc.Url)}");
        if (response.IsSuccessStatusCode)
        {
            doc.IsDeleted = true;
        }
    }

    private async Task UpdateStatus(RelatedDoc doc, bool isReviewed)
    {
        var payload = new DocumentStatusRequest
        {
            BlobUrl = doc.Url,
            IsReviewed = isReviewed,
            IsDeleted = doc.IsDeleted
        };

        var response = await Http.PostAsJsonAsync("api/document/status", payload);
        if (response.IsSuccessStatusCode)
        {
            doc.IsReviewed = isReviewed;
        }
    }

    private void ShowPreview(string url)
    {
        previewUrl = url;
    }

    public class RelatedDocGroup
    {
        public string ProcessId { get; set; }
        public string Summary { get; set; }
        public List<RelatedDoc> Documents { get; set; }
    }

    public class RelatedDoc
    {
        public string Name { get; set; }
        public string Url { get; set; }
        public string Type { get; set; }
        public bool IsReviewed { get; set; }
        public bool IsDeleted { get; set; }
    }

    public class DocumentStatusRequest
    {
        public string BlobUrl { get; set; }
        public bool IsReviewed { get; set; }
        public bool IsDeleted { get; set; }
    }
}
