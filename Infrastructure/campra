
User Story 1 ‚Äì PoC Environment Setup & Architecture

Title:
Setup environment and define architecture for Name Search PoC

Description:
As a developer, I want to set up the Azure environment and define the high-level architecture for the Name Search PoC so that all components (Azure Search, Azure Function, Blazor UI, Storage) can interact seamlessly.

Acceptance Criteria:

Architecture diagram created and reviewed

Azure Search, Function App, and Storage resources created

Local .NET Core and Blazor projects initialized and integrated


Effort: 8 hrs


---

User Story 2 ‚Äì Data Preparation and Ingestion

Title:
Prepare and ingest name dataset into Azure Cognitive Search

Description:
As a developer, I want to prepare and ingest the sample dataset of individual and business names into Azure Cognitive Search so that search operations can be validated.

Acceptance Criteria:

Dataset with IndividualFlag column prepared

Blob data source and indexer configured in Azure Search

Index structure with analyzers created and validated


Effort: 6 hrs


---

User Story 3 ‚Äì Analyzer Evaluation and Customization

Title:
Research and implement custom analyzers (phonetic, fuzzy, Beider-Morse, Double Metaphone)

Description:
As a developer, I want to research and test different analyzer configurations in Azure Cognitive Search so that name variations (spelling, phonetic differences) can be accurately matched.

Acceptance Criteria:

Double Metaphone and Beider-Morse analyzers configured

Query analyzer behavior validated for test cases (e.g., ‚ÄúSteven‚Äù ‚Üí ‚ÄúStephen‚Äù)

Results comparison documented with recommendation


Effort: 12 hrs


---

User Story 4 ‚Äì Azure Function Skill for Name Enrichment

Title:
Create Azure Function skill for conditional name enrichment

Description:
As a developer, I want to build an Azure Function skill that generates enriched fields (phonetic codes, nicknames) for individual names only, using the IndividualFlag, so that irrelevant business names are excluded.

Acceptance Criteria:

Azure Function skill created and deployed

Logic applies only to IndividualFlag = ‚ÄúI‚Äù

Function integrated in Search indexer skillset

Validation with sample data done


Effort: 10 hrs


---

User Story 5 ‚Äì SDK-Based Query Logic Implementation

Title:
Implement .NET SDK logic for dynamic name search queries

Description:
As a developer, I want to use the Azure.Search.Documents SDK to build dynamic query logic supporting phonetic, fuzzy, and enriched searches so that users can test different search behaviors.

Acceptance Criteria:

Search service implemented using SDK

Dynamic parameters (fuzzy level, analyzer type) supported

Results displayed with relevance score

Backend validated via unit tests


Effort: 12 hrs


---

User Story 6 ‚Äì Blazor UI for Search Testing

Title:
Build a Blazor WebAssembly interface for search experimentation

Description:
As a user, I want an intuitive Blazor UI to input search names, toggle analyzer modes, and view search scores so that I can visually compare search accuracy.

Acceptance Criteria:

UI components for name input, filters, and flags

Result grid showing search score, matched name, and analyzer used

Tooltip for search score explanation

Integration with backend API validated


Effort: 10 hrs


---

User Story 7 ‚Äì Evaluation and Documentation

Title:
Evaluate and document results for the Name Search PoC

Description:
As a developer, I want to evaluate the PoC accuracy and document findings so that learnings can be reused in production-grade implementation.

Acceptance Criteria:

Evaluation report comparing analyzers and enrichment outcomes

Summary of accuracy metrics and improvement areas

Documentation uploaded to project wiki or shared folder


Effort: 8 hrs


---

‚úÖ Summary Table for DevOps View


















User Story ID	Title	Effort (hrs)	Status

1	PoC Environment Setup & Architecture	8	Planned
2	Data Preparation and Ingestion	6	Planned
3	Analyzer Evaluation and Customization	12	Planned
4	Azure Function Skill for Name Enrichment	10	Planned
5	SDK-Based Query Logic Implementation	12	Planned
6	Blazor UI for Search Testing	10	Planned
7	Evaluation and Documentation	8	Planned


Total Estimated Effort: 66 hrs (~8‚Äì9 working days)



üß© User Story 1 ‚Äì PoC Environment Setup & Architecture (8 hrs)

Tasks:

1. Define PoC Scope and Architecture (2 hrs)

Identify components: Azure Search, Azure Function, OpenAI, Blazor, Blob Storage

Finalize data flow and sequence diagram



2. Create Azure Resources (3 hrs)

Provision Azure Cognitive Search (S1), Function App, Blob Storage, and OpenAI resource

Configure access keys and connection strings



3. Initialize .NET Solution and Configure Dependencies (3 hrs)

Create NameSearch.API and NameSearch.UI (Blazor) projects

Add required NuGet packages (Azure.Search.Documents, Azure.AI.OpenAI, etc.)

Setup environment variables and appsettings.json





---

üß© User Story 2 ‚Äì Data Preparation & Ingestion (6 hrs)

Tasks:

1. Prepare Sample Dataset (2 hrs)

Create CSV with fields: Name, IndividualFlag, City, State, etc.

Include both Individual and Business records



2. Upload Dataset to Blob Storage (1 hr)

Configure container and assign connection string in Azure Portal



3. Configure Data Source and Indexer (2 hrs)

Setup Azure Search data source from Blob

Create indexer to map fields, set refresh interval



4. Validate Indexing Process (1 hr)

Verify indexer execution logs and document ingestion success





---

üß© User Story 3 ‚Äì Analyzer Evaluation & Customization (12 hrs)

Tasks:

1. Research Built-in and Custom Analyzers (2 hrs)

Review documentation for phonetic and fuzzy analyzers



2. Implement Double Metaphone Analyzer (3 hrs)

Define analyzer in index schema with phonetic_encoder = "doubleMetaphone"



3. Implement Beider-Morse Analyzer (3 hrs)

Add custom analyzer configuration and validate during indexing



4. Compare Results and Tune Parameters (2 hrs)

Run test queries for known name pairs



5. Document Findings and Recommendations (2 hrs)

Summarize comparison table for phonetic vs fuzzy accuracy





---

üß© User Story 4 ‚Äì Azure Function Skill for Name Enrichment (10 hrs)

Tasks:

1. Design Input/Output Schema (2 hrs)

Define input fields (Name, IndividualFlag) and output (PhoneticKey, Nicknames)



2. Develop Function Logic (3 hrs)

Create Azure Function using .NET Isolated model

Enrich only when IndividualFlag = 'I'



3. Integrate Function into Skillset (2 hrs)

Connect Function to Search indexer skillset

Validate field mappings



4. Test Enrichment End-to-End (3 hrs)

Trigger indexer ‚Üí verify enriched data ‚Üí fix transformation issues





---

üß© User Story 5 ‚Äì LLM-Based Name Variations (Azure OpenAI) (10 hrs)

Tasks:

1. Setup Azure OpenAI Resource (2 hrs)

Deploy GPT-4.0-mini in Azure OpenAI Studio

Obtain endpoint and key



2. Design Prompt for Name Variation (2 hrs)

Create system + user prompts for ‚ÄúGenerate most common global name variations‚Äù



3. Implement LLM Integration Service (3 hrs)

Build OpenAINameVariationService.cs

Handle retries, caching, and cost tracking



4. Validate Outputs and Tune Prompts (2 hrs)

Compare model output vs ground truth (nicknames, transliterations)



5. Document and Optimize Token Cost (1 hr)

Record per-request cost and average response latency





---

üß© User Story 6 ‚Äì SDK-Based Query Logic Implementation (12 hrs)

Tasks:

1. Implement Search Service Using SDK (3 hrs)

Create AzureSearchService.cs

Add base search method using SearchClient



2. Add Dynamic Query Modes (3 hrs)

Support phonetic, fuzzy, and LLM-enriched search options



3. Add Scoring and Filtering Logic (3 hrs)

Include relevance score, fuzzy level, analyzer type filters



4. Unit Test and Validate Results (3 hrs)

Use xUnit + Shouldly to test all query combinations





---

üß© User Story 7 ‚Äì Blazor UI for Search Testing (10 hrs)

Tasks:

1. Build Search Input and Filter Controls (3 hrs)

Add name input, analyzer dropdown, IndividualFlag toggle



2. Display Search Results Grid (2 hrs)

Include matched name, score, analyzer, and variation details



3. Add Tooltip and Styling Enhancements (2 hrs)

Tooltip beside score; modern UI layout with Tailwind



4. Integrate Backend API Calls (3 hrs)

Wire Blazor components with SearchController in API





---

üß© User Story 8 ‚Äì Evaluation & Documentation (8 hrs)

Tasks:

1. Conduct Accuracy Evaluation (2 hrs)

Compare phonetic, fuzzy, and LLM results on validation dataset



2. Analyze Precision/Recall Metrics (2 hrs)

Use labeled samples to calculate match accuracy



3. Document Architecture and Results (3 hrs)

Create summary document + architecture flow diagram



4. Review and Submit PoC Findings (1 hr)

Final review with team; record key learnings





---

‚úÖ Total Estimated Effort Summary

User Story	Effort (hrs)

1. Setup & Architecture	8
2. Data Prep & Ingestion	6
3. Analyzer Evaluation	12
4. Azure Function Skill	10
5. LLM-Based Variations	10
6. SDK Query Logic	12
7. Blazor UI	10
8. Evaluation & Docs	8
Total	76 hrs (~9‚Äì10 working days)












..
