public async Task<List<string>> GetAllDocumentsAsync()
{
    var options = new SearchOptions
    {
        Select = { "documentId" }, // ✅ Fetch only document IDs or titles
        Size = 100 // ✅ Limit to 100 documents (adjust as needed)
    };

    var results = await _searchClient.SearchAsync<SearchDocument>("*", options);
    List<string> documentIds = new();

    await foreach (var result in results.Value.GetResultsAsync())
    {
        documentIds.Add(result.Document["documentId"].ToString());
    }

    return documentIds;
}


[HttpGet("documents")]
public async Task<IActionResult> GetDocuments()
{
    var documentList = await _azureSearchService.GetAllDocumentsAsync();
    return Ok(documentList);
}


@page "/document-summary"
@inject ApiService ApiService

<h3>📄 AI-Powered Document Assistant</h3>

<!-- ✅ Dropdown to Select a Document -->
<select @bind="selectedDocumentId" class="form-select">
    <option disabled selected>Select a document</option>
    @foreach (var doc in documentList)
    {
        <option value="@doc">@doc</option>
    }
</select>

<!-- Chat UI -->
<div class="chat-container">
    <div class="chat-messages">
        @foreach (var message in chatMessages)
        {
            <div class="chat-message @(message.IsUser ? "user-message" : "bot-message")">
                <strong>@(message.IsUser ? "You" : "AI"):</strong> @message.Text
            </div>
        }
    </div>

    <div class="chat-input">
        <input type="text" @bind="userQuery" placeholder="Ask about your document..." class="form-control" />
        <button @onclick="SendQuery" class="btn btn-primary mt-2" disabled="@isLoading || string.IsNullOrEmpty(userQuery)">Ask AI</button>
    </div>

    @if (isLoading)
    {
        <div class="spinner-border text-primary mt-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</div>

@code {
    private List<string> documentList = new();
    private string selectedDocumentId;
    private string userQuery;
    private bool isLoading;
    private List<ChatMessage> chatMessages = new();

    protected override async Task OnInitializedAsync()
    {
        documentList = await ApiService.GetAllDocumentsAsync();
    }

    private async Task SendQuery()
    {
        if (string.IsNullOrEmpty(selectedDocumentId) || string.IsNullOrEmpty(userQuery)) return;

        isLoading = true;
        chatMessages.Add(new ChatMessage { Text = userQuery, IsUser = true });
        StateHasChanged();

        var response = await ApiService.GetSummaryAsync(selectedDocumentId, userQuery);
        chatMessages.Add(new ChatMessage { Text = response, IsUser = false });

        isLoading = false;
        userQuery = string.Empty;
    }

    private class ChatMessage
    {
        public string Text { get; set; }
        public bool IsUser { get; set; }
    }
}



📌 Modify ApiService.cs
public async Task<List<string>> GetAllDocumentsAsync()
{
    return await _httpClient.GetFromJsonAsync<List<string>>("api/summarizer/documents");
}

public async Task<string> GetSummaryAsync(string documentId, string query)
{
    return await _httpClient.GetStringAsync($"api/summarizer/summarize?documentId={documentId}&query={query}");
}
