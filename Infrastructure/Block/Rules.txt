using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

public static class ExtractFieldsFromOCR
{
    [FunctionName("ExtractFieldsFromOCR")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
        dynamic data = JObject.Parse(requestBody);
        string ocrText = data.values[0].data.text; // Assume OCR text is passed here

        // Extract fields using regex
        var policyNumberMatch = Regex.Match(ocrText, @"Policy\s*Number:\s*(\w+)");
        var orderNumberMatch = Regex.Match(ocrText, @"Order\s*Number:\s*(\w+)");
        var propertyAddressMatch = Regex.Match(ocrText, @"Property\s*Address:\s*(.+?)(?:\n|$)");
        var closingDateMatch = Regex.Match(ocrText, @"Closing\s*Date:\s*(\d{2}/\d{2}/\d{4})");
        var borrowerNameMatch = Regex.Match(ocrText, @"Borrower\s*Name:\s*(.+?)(?:\n|$)");
        var sellerNameMatch = Regex.Match(ocrText, @"Seller\s*Name:\s*(.+?)(?:\n|$)");
        var buyerNameMatch = Regex.Match(ocrText, @"Buyer\s*Name:\s*(.+?)(?:\n|$)");
        var policyDateMatch = Regex.Match(ocrText, @"Policy\s*Date:\s*(\d{2}/\d{2}/\d{4})");

        var result = new
        {
            policyNumber = policyNumberMatch.Success ? policyNumberMatch.Groups[1].Value : null,
            orderNumber = orderNumberMatch.Success ? orderNumberMatch.Groups[1].Value : null,
            propertyAddress = propertyAddressMatch.Success ? propertyAddressMatch.Groups[1].Value : null,
            closingDate = closingDateMatch.Success ? closingDateMatch.Groups[1].Value : null,
            borrowerName = borrowerNameMatch.Success ? borrowerNameMatch.Groups[1].Value : null,
            sellerName = sellerNameMatch.Success ? sellerNameMatch.Groups[1].Value : null,
            buyerName = buyerNameMatch.Success ? buyerNameMatch.Groups[1].Value : null,
            policyDate = policyDateMatch.Success ? policyDateMatch.Groups[1].Value : null
        };

        return new OkObjectResult(new { values = new[] { new { recordId = data.values[0].recordId, data = result } } });
    }
}


{
  "@odata.type": "#Microsoft.Skills.Custom.WebApiSkill",
  "name": "#1",
  "uri": "https://[your-function-app].azurewebsites.net/api/ExtractFieldsWithOCR",
  "inputs": [
    {
      "name": "file_data",
      "source": "/document/file_data"
    }
  ],
  "outputs": [
    {
      "name": "policyNumber",
      "targetName": "policyNumber"
    },
    {
      "name": "orderNumber",
      "targetName": "orderNumber"
    },
    {
      "name": "propertyAddress",
      "targetName": "propertyAddress"
    },
    {
      "name": "closingDate",
      "targetName": "closingDate"
    },
    {
      "name": "borrowerName",
      "targetName": "borrowerName"
    },
    {
      "name": "sellerName",
      "targetName": "sellerName"
    },
    {
      "name": "buyerName",
      "targetName": "buyerName"
    },
    {
      "name": "policyDate",
      "targetName": "policyDate"
    }
  ]
}




"outputFieldMappings": [
  { "sourceFieldName": "/document/policyNumber", "targetFieldName": "policyNumber" },
  { "sourceFieldName": "/document/orderNumber", "targetFieldName": "orderNumber" },
  { "sourceFieldName": "/document/propertyAddress", "targetFieldName": "propertyAddress" },
  { "sourceFieldName": "/document/closingDate", "targetFieldName": "closingDate" },
  { "sourceFieldName": "/document/borrowerName", "targetFieldName": "borrowerName" },
  { "sourceFieldName": "/document/sellerName", "targetFieldName": "sellerName" },
  { "sourceFieldName": "/document/buyerName", "targetFieldName": "buyerName" },
  { "sourceFieldName": "/document/policyDate", "targetFieldName": "policyDate" },
  { "sourceFieldName": "/document/closingDate", "targetFieldName": "documentDate" }
]



{
  "name": "title-insurance-index",
  "fields": [
    { "name": "id", "type": "Edm.String", "key": true, "searchable": false },
    { "name": "contentVector", "type": "Collection(Edm.Single)", "searchable": true, "vectorSearchProfile": "myVectorProfile" },
    { "name": "content", "type": "Edm.String", "searchable": true, "retrievable": true },
    { "name": "documentDate", "type": "Edm.DateTimeOffset", "filterable": true, "sortable": true, "retrievable": true },
    { "name": "fileName", "type": "Edm.String", "searchable": false, "retrievable": true },
    { "name": "policyNumber", "type": "Edm.String", "searchable": true, "filterable": true, "retrievable": true },
    { "name": "orderNumber", "type": "Edm.String", "searchable": true, "filterable": true, "retrievable": true },
    { "name": "borrowerName", "type": "Edm.String", "searchable": true, "filterable": true, "retrievable": true },
    { "name": "sellerName", "type": "Edm.String", "searchable": true, "filterable": true, "retrievable": true },
    { "name": "buyerName", "type": "Edm.String", "searchable": true, "filterable": true, "retrievable": true },
    { "name": "propertyAddress", "type": "Edm.String", "searchable": true, "filterable": true, "retrievable": true },
    { "name": "closingDate", "type": "Edm.DateTimeOffset", "searchable": true, "filterable": true, "retrievable": true },
    { "name": "policyDate", "type": "Edm.DateTimeOffset", "searchable": true, "filterable": true, "retrievable": true }
  ],
  "vectorSearch": {
    "profiles": [
      { "name": "myVectorProfile", "algorithm": "hnsw", "similarity": "cosine" }
    ]
  },
  "suggesters": [
    { "name": "sg", "searchMode": "analyzingInfixMatching", "sourceFields": ["policyNumber", "borrowerName", "propertyAddress"] }
  ]
}
