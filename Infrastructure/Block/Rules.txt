 Detect hardcoded default passwords, admin accounts, or insecure settings (e.g., debug mode enabled in production).
 suggest to Use environment variables or secrets management tools (e.g., Azure Key Vault):
 // UNSAFE: Default credentials in code  
var adminUser = new User { 
    Username = "admin", 
    Password = "admin@123" // Default password
};  

 Ensure security headers are set (e.g., Content-Security-Policy, X-Content-Type-Options).
Example (Bad Practice):

Detect unused services, open ports, or debug features (e.g., Swagger UI in production).
<!-- UNSAFE: Debug mode enabled in production web.config -->  
<system.web>  
    <compilation debug="true" />  
</system.web>  

 Prevent stack traces or sensitive data leakage in error responses
 \
 Detect overly permissive Cross-Origin Resource Sharing (CORS) configurations.

 Ensure sensitive files (e.g., logs, configs) are not world-readable.