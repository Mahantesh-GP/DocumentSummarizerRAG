public static async Task<string> ConvertToCsv(List<SearchDocument> documents)
{
    string filePath = Path.Combine(Path.GetTempPath(), "documents.csv");

    using (StreamWriter writer = new StreamWriter(filePath))
    {
        await writer.WriteLineAsync("ID,Content,PageNumber"); // CSV Header

        foreach (var doc in documents)
        {
            string id = doc["id"].ToString();
            string content = doc["content"].ToString().Replace(",", " "); // Remove commas to avoid CSV issues
            string pageNumber = doc["page_number"].ToString();

            await writer.WriteLineAsync($"{id},{content},{pageNumber}");
        }
    }
    
    return filePath;
}

public static async Task<string> ConvertToJson(List<SearchDocument> documents)
{
    string filePath = Path.Combine(Path.GetTempPath(), "documents.json");

    string json = JsonSerializer.Serialize(documents, new JsonSerializerOptions { WriteIndented = true });
    await File.WriteAllTextAsync(filePath, json);

    return filePath;
}

using iTextSharp.text;
using iTextSharp.text.pdf;

public static async Task<string> ConvertToPdf(List<SearchDocument> documents)
{
    string filePath = Path.Combine(Path.GetTempPath(), "documents.pdf");

    using (FileStream fs = new FileStream(filePath, FileMode.Create))
    {
        Document doc = new Document();
        PdfWriter.GetInstance(doc, fs);
        doc.Open();

        foreach (var document in documents)
        {
            doc.Add(new Paragraph($"ID: {document["id"]}"));
            doc.Add(new Paragraph($"Content: {document["content"]}"));
            doc.Add(new Paragraph($"Page Number: {document["page_number"]}"));
            doc.Add(new Paragraph("--------------------------------------------------"));
        }

        doc.Close();
    }

    return filePath;
}
[ApiController]
[Route("api/download")]
public class DownloadController : ControllerBase
{
    private readonly AzureSearchService _searchService;

    public DownloadController(AzureSearchService searchService)
    {
        _searchService = searchService;
    }

    [HttpGet("{format}")]
    public async Task<IActionResult> DownloadAllDocuments(string format)
    {
        var documents = await _searchService.GetAllDocumentsAsync();
        if (documents.Count == 0)
        {
            return NotFound("No documents found.");
        }

        string filePath = format switch
        {
            "csv" => await ConvertToCsv(documents),
            "json" => await ConvertToJson(documents),
            "pdf" => await ConvertToPdf(documents),
            _ => throw new ArgumentException("Invalid format")
        };

        var fileBytes = await System.IO.File.ReadAllBytesAsync(filePath);
        string mimeType = format switch
        {
            "csv" => "text/csv",
            "json" => "application/json",
            "pdf" => "application/pdf",
            _ => "application/octet-stream"
        };

        return File(fileBytes, mimeType, $"documents.{format}");
    }
}


@page "/download"
@inject HttpClient Http

<h3>Download Documents</h3>

<button class="btn btn-primary" @onclick="() => DownloadFile('csv')">Download CSV</button>
<button class="btn btn-primary" @onclick="() => DownloadFile('json')">Download JSON</button>
<button class="btn btn-primary" @onclick="() => DownloadFile('pdf')">Download PDF</button>

@code {
    private async Task DownloadFile(string format)
    {
        var fileUrl = $"api/download/{format}";
        await JS.InvokeVoidAsync("window.open", fileUrl, "_blank");
    }
}



var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddHttpClient();

builder.Services.AddSingleton(new AzureSearchService(
    "your-search-service-name",
    "your-index-name",
    "your-api-key"
));

var app = builder.Build();

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();

