public string GetFileUrl(string fileName)
    {
        var blobContainer = _blobServiceClient.GetBlobContainerClient(_containerName);
        var blobClient = blobContainer.GetBlobClient(fileName);
        return blobClient.Uri.ToString(); // âœ… Returns direct download link
    }

[HttpGet("download")]
public IActionResult GetFileUrl([FromQuery] string fileName)
{
    if (string.IsNullOrEmpty(fileName))
        return BadRequest("File name is required.");

    var fileUrl = _azureStorageService.GetFileUrl(fileName);
    return Ok(new { FileUrl = fileUrl });
}

@inject ApiService ApiService

<h3>ðŸ“‚ Upload and Download Files</h3>

<div class="container">
    <div class="card p-3">
        <h5>Upload Document</h5>
        <input type="file" @onchange="OnFileSelected" class="form-control" />
        <button @onclick="UploadFile" class="btn btn-primary mt-2" disabled="@isLoading">Upload</button>
    </div>

    @if (!string.IsNullOrEmpty(uploadedFileUrl))
    {
        <div class="card p-3 mt-3">
            <h5>Download Document</h5>
            <a href="@uploadedFileUrl" target="_blank" class="btn btn-success">Download File</a>
        </div>
    }

    @if (isLoading)
    {
        <div class="spinner-border text-primary mt-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</div>

@code {
    private IBrowserFile selectedFile;
    private bool isLoading;
    private string uploadedFileUrl;

    private void OnFileSelected(ChangeEventArgs e)
    {
        selectedFile = (IBrowserFile)e.Value;
    }

    private async Task UploadFile()
    {
        if (selectedFile == null) return;

        isLoading = true;
        StateHasChanged();

        var fileUrl = await ApiService.UploadFileAsync(selectedFile);
        uploadedFileUrl = fileUrl;

        isLoading = false;
    }
}
