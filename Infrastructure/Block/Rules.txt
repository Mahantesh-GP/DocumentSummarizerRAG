using Azure;
using Azure.Search.Documents;
using Azure.Search.Documents.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

public class AzureSearchService
{
    private readonly SearchClient _searchClient;

    public AzureSearchService(string searchServiceName, string indexName, string apiKey)
    {
        Uri endpoint = new Uri($"https://{searchServiceName}.search.windows.net");
        AzureKeyCredential credential = new AzureKeyCredential(apiKey);
        _searchClient = new SearchClient(endpoint, indexName, credential);
    }

    public async Task<List<SearchDocument>> GetAllUploadedDocumentsAsync()
    {
        var options = new SearchOptions
        {
            Size = 1000, // Fetch up to 1000 documents
            Select = { "id", "document_name", "upload_date", "page_count" } // Include only relevant fields
        };

        List<SearchDocument> results = new List<SearchDocument>();

        await foreach (var result in _searchClient.SearchAsync<SearchDocument>("*", options))
        {
            results.Add(result.Document);
        }

        return results;
    }
}





[ApiController]
[Route("api/documents")]
public class DocumentsController : ControllerBase
{
    private readonly AzureSearchService _searchService;

    public DocumentsController(AzureSearchService searchService)
    {
        _searchService = searchService;
    }

    [HttpGet]
    public async Task<IActionResult> GetAllDocuments()
    {
        var documents = await _searchService.GetAllUploadedDocumentsAsync();
        return Ok(documents);
    }
}


using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

public class DocumentService
{
    private readonly HttpClient _httpClient;

    public DocumentService(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    public async Task<List<DocumentModel>> GetAllDocumentsAsync()
    {
        return await _httpClient.GetFromJsonAsync<List<DocumentModel>>("api/documents");
    }
}

public class DocumentModel
{
    public string Id { get; set; }
    public string DocumentName { get; set; }
    public DateTime UploadDate { get; set; }
    public int PageCount { get; set; }
}


@page "/documents"
@inject DocumentService DocumentService

<h3>Uploaded Documents</h3>

@if (documents == null)
{
    <p>Loading...</p>
}
else if (documents.Count == 0)
{
    <p>No documents uploaded yet.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Document Name</th>
                <th>Upload Date</th>
                <th>Page Count</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in documents)
            {
                <tr>
                    <td>@doc.DocumentName</td>
                    <td>@doc.UploadDate.ToString("yyyy-MM-dd")</td>
                    <td>@doc.PageCount</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ViewDocument(doc.Id)">View</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DocumentModel> documents;

    protected override async Task OnInitializedAsync()
    {
        documents = await DocumentService.GetAllDocumentsAsync();
    }

    private void ViewDocument(string documentId)
    {
        NavigationManager.NavigateTo($"/document/{documentId}");
    }
}


@page "/document/{documentId}"
@inject DocumentService DocumentService
@inject HttpClient Http

<h3>Document Details</h3>

@if (document == null)
{
    <p>Loading...</p>
}
else
{
    <h4>@document.DocumentName</h4>
    <p><strong>Uploaded:</strong> @document.UploadDate.ToString("yyyy-MM-dd")</p>
    <p><strong>Page Count:</strong> @document.PageCount</p>

    <h5>Chunks:</h5>
    <ul>
        @foreach (var chunk in document.Chunks)
        {
            <li>@chunk</li>
        }
    </ul>
}

@code {
    [Parameter] public string DocumentId { get; set; }
    private DocumentModel document;

    protected override async Task OnInitializedAsync()
    {
        document = await Http.GetFromJsonAsync<DocumentModel>($"api/documents/{DocumentId}");
    }
}
