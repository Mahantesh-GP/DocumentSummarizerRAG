using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Azure;
using Azure.AI.Vision;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Net.Http;
using System;

public static class ExtractFieldsWithOCR
{
    private static readonly HttpClient httpClient = new HttpClient();
    private static readonly string visionEndpoint = "https://[your-vision-resource].cognitiveservices.azure.com/";
    private static readonly string visionKey = "[your-vision-api-key]";

    [FunctionName("ExtractFieldsWithOCR")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
        dynamic data = JObject.Parse(requestBody);
        string fileData = data.values[0].data.file_data; // Base64-encoded PDF

        // Convert base64 to binary
        byte[] pdfBytes = Convert.FromBase64String(fileData);

        // Call Vision API for OCR
        string ocrUrl = $"{visionEndpoint}vision/v3.2/read/analyze";
        httpClient.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", visionKey);
        var content = new ByteArrayContent(pdfBytes);
        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/pdf");
        var response = await httpClient.PostAsync(ocrUrl, content);

        // Get the operation location
        string operationLocation = response.Headers.GetValues("Operation-Location").First();
        string resultUrl = operationLocation + "/results";
        string ocrResult;
        do
        {
            await Task.Delay(1000); // Wait for OCR to complete
            var resultResponse = await httpClient.GetAsync(resultUrl);
            ocrResult = await resultResponse.Content.ReadAsStringAsync();
        } while (!ocrResult.Contains("succeeded"));

        // Parse OCR result
        dynamic ocrData = JObject.Parse(ocrResult);
        string extractedText = "";
        foreach (var line in ocrData.analyzeResult.readResults[0].lines)
        {
            extractedText += line.text + "\n";
        }

        // Extract fields using regex
        var policyNumberMatch = Regex.Match(extractedText, @"Policy\s*Number:\s*(\w+)");
        var orderNumberMatch = Regex.Match(extractedText, @"Order\s*Number:\s*(\w+)");
        var propertyAddressMatch = Regex.Match(extractedText, @"Property\s*Address:\s*(.+?)(?:\n|$)");
        var closingDateMatch = Regex.Match(extractedText, @"Closing\s*Date:\s*(\d{2}/\d{2}/\d{4})");
        var borrowerNameMatch = Regex.Match(extractedText, @"Borrower\s*Name:\s*(.+?)(?:\n|$)");
        var sellerNameMatch = Regex.Match(extractedText, @"Seller\s*Name:\s*(.+?)(?:\n|$)");
        var buyerNameMatch = Regex.Match(extractedText, @"Buyer\s*Name:\s*(.+?)(?:\n|$)");
        var policyDateMatch = Regex.Match(extractedText, @"Policy\s*Date:\s*(\d{2}/\d{2}/\d{4})");

        var result = new
        {
            policyNumber = policyNumberMatch.Success ? policyNumberMatch.Groups[1].Value : null,
            orderNumber = orderNumberMatch.Success ? orderNumberMatch.Groups[1].Value : null,
            propertyAddress = propertyAddressMatch.Success ? propertyAddressMatch.Groups[1].Value : null,
            closingDate = closingDateMatch.Success ? closingDateMatch.Groups[1].Value : null,
            borrowerName = borrowerNameMatch.Success ? borrowerNameMatch.Groups[1].Value : null,
            sellerName = sellerNameMatch.Success ? sellerNameMatch.Groups[1].Value : null,
            buyerName = buyerNameMatch.Success ? buyerNameMatch.Groups[1].Value : null,
            policyDate = policyDateMatch.Success ? policyDateMatch.Groups[1].Value : null
        };

        return new OkObjectResult(new { values = new[] { new { recordId = data.values[0].recordId, data = result } } });
    }
}



{
  "@odata.type": "#Microsoft.Skills.Custom.WebApiSkill",
  "name": "#1",
  "uri": "https://[your-function-app].azurewebsites.net/api/ExtractFieldsWithOCR",
  "inputs": [
    {
      "name": "file_data",
      "source": "/document/file_data"
    }
  ],
  "outputs": [
    {
      "name": "policyNumber",
      "targetName": "policyNumber"
    },
    {
      "name": "orderNumber",
      "targetName": "orderNumber"
    },
    {
      "name": "propertyAddress",
      "targetName": "propertyAddress"
    },
    {
      "name": "closingDate",
      "targetName": "closingDate"
    },
    {
      "name": "borrowerName",
      "targetName": "borrowerName"
    },
    {
      "name": "sellerName",
      "targetName": "sellerName"
    },
    {
      "name": "buyerName",
      "targetName": "buyerName"
    },
    {
      "name": "policyDate",
      "targetName": "policyDate"
    }
  ]
}




"outputFieldMappings": [
  { "sourceFieldName": "/document/policyNumber", "targetFieldName": "policyNumber" },
  { "sourceFieldName": "/document/orderNumber", "targetFieldName": "orderNumber" },
  { "sourceFieldName": "/document/propertyAddress", "targetFieldName": "propertyAddress" },
  { "sourceFieldName": "/document/closingDate", "targetFieldName": "closingDate" },
  { "sourceFieldName": "/document/borrowerName", "targetFieldName": "borrowerName" },
  { "sourceFieldName": "/document/sellerName", "targetFieldName": "sellerName" },
  { "sourceFieldName": "/document/buyerName", "targetFieldName": "buyerName" },
  { "sourceFieldName": "/document/policyDate", "targetFieldName": "policyDate" },
  { "sourceFieldName": "/document/closingDate", "targetFieldName": "documentDate" }
]
