using System.Text.RegularExpressions;
using Azure;
using Azure.AI.OpenAI;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using System.Net.Http;

public static class ExtractAndTagFields
{
    [FunctionName("ExtractAndTagFields")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
        var input = JObject.Parse(requestBody);
        var record = input["values"]?[0];
        string recordId = record?["recordId"]?.ToString();

        var data = record?["data"] as JObject;
        var chunks = data?["chunks"]?.ToObject<List<string>>() ?? new List<string>();
        string fullText = string.Join("\n\n", chunks);
        string limitedText = fullText.Length > 3000 ? fullText[..3000] : fullText;

        var extractedFields = await ExtractFieldsUsingOpenAI(limitedText, log);
        string documentType = await ClassifyDocumentType(limitedText, log);
        string groupType = await ClassifyGroupType(limitedText, log);
        string blobPath = data?["metadata_storage_path"]?.ToString();
        string containerName = !string.IsNullOrWhiteSpace(blobPath) ? new Uri(blobPath).Segments[1].TrimEnd('/') : null;

        var cleanedFields = PostProcessFields(extractedFields, log, fullText);
        cleanedFields["documentType"] = documentType;
        cleanedFields["groupType"] = groupType;
        cleanedFields["blobUrl"] = blobPath;
        cleanedFields["containerName"] = containerName;

        var response = new
        {
            values = new[]
            {
                new
                {
                    recordId = recordId,
                    data = cleanedFields
                }
            }
        };

        return new OkObjectResult(response);
    }

    private static async Task<Dictionary<string, object>> ExtractFieldsUsingOpenAI(string text, ILogger log)
    {
        var client = new OpenAIClient(
            new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
            new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

        var chat = new ChatCompletionsOptions()
        {
            Messages =
            {
                new ChatMessage(ChatRole.System, "Extract the following fields if present: policyNumber, orderNumber, propertyAddress, closingDate, borrowerName, sellerName, buyerName, policyDate. Return only a JSON object with those keys."),
                new ChatMessage(ChatRole.User, text)
            },
            Temperature = 0.3f,
            MaxTokens = 512
        };

        try
        {
            var completion = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
            var json = completion.Value.Choices[0].Message.Content;
            return JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
        }
        catch (Exception ex)
        {
            log.LogWarning($"OpenAI call failed: {ex.Message}");
            return new();
        }
        private static async Task<string> ClassifyDocumentType(string text, ILogger log)
    {
        var client = new OpenAIClient(new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
            new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

        var chat = new ChatCompletionsOptions()
        {
            Messages =
            {
                new ChatMessage(ChatRole.System, "Classify the document as one of: Policy, Mortgage, Sale Deed, Commitment Package, Closing Disclosure, or Other. Return only the type."),
                new ChatMessage(ChatRole.User, text)
            },
            Temperature = 0.2f,
            MaxTokens = 20
        };

        try
        {
            var result = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
            return result.Value.Choices[0].Message.Content?.Trim();
        }
        catch (Exception ex)
        {
            log.LogWarning($"DocumentType classification failed: {ex.Message}");
            return "Unknown";
        }
    }

    private static async Task<string> ClassifyGroupType(string text, ILogger log)
    {
        var client = new OpenAIClient(new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
            new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

        var chat = new ChatCompletionsOptions()
        {
            Messages =
            {
                new ChatMessage(ChatRole.System, "Based on the document content, classify its group as: TitlePackage, ClosingPackage, or Misc. Return only the group name."),
                new ChatMessage(ChatRole.User, text)
            },
            Temperature = 0.2f,
            MaxTokens = 20
        };

        try
        {
            var result = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
            return result.Value.Choices[0].Message.Content?.Trim();
        }
        catch (Exception ex)
        {
            log.LogWarning($"GroupType classification failed: {ex.Message}");
            return "Misc";
        }
    }


    private static Dictionary<string, object> PostProcessFields(Dictionary<string, object> extracted, ILogger log, string rawText)
    {
        var cleaned = new Dictionary<string, object>();

        // Copy over extracted fields directly
        foreach (var key in new[] { "policyNumber", "orderNumber", "propertyAddress", "closingDate", "borrowerName", "sellerName", "buyerName", "policyDate" })
        {
            cleaned[key] = extracted.ContainsKey(key) ? extracted[key] : null;
        }

        // Fallback regex
        if (!string.IsNullOrWhiteSpace(rawText))
        {
            cleaned["policyNumber"] ??= MatchOrNull(rawText, "Policy\\s*Number[:\\-\\s]*([\\w\\-/]+)");
            cleaned["orderNumber"] ??= MatchOrNull(rawText, "Order\\s*Number[:\\-\\s]*([\\w\\-/]+)");
            cleaned["propertyAddress"] ??= MatchOrNull(rawText, "Property\\s*Address[:\\-\\s]*(.+?)(\\n|$)");
            cleaned["borrowerName"] ??= MatchOrNull(rawText, "Borrower[:\\-\\s]*(.+?)(\\n|$)");
            cleaned["buyerName"] ??= MatchOrNull(rawText, "Buyer[:\\-\\s]*(.+?)(\\n|$)");
            cleaned["sellerName"] ??= MatchOrNull(rawText, "Seller[:\\-\\s]*(.+?)(\\n|$)");
            cleaned["closingDate"] ??= MatchOrNull(rawText, "Closing\\s*Date[:\\-\\s]*([\\d]{2}/[\\d]{2}/[\\d]{4})");
            cleaned["policyDate"] ??= MatchOrNull(rawText, "Policy\\s*Date[:\\-\\s]*([\\d]{2}/[\\d]{2}/[\\d]{4})");
        }

        return cleaned;
    }

    private static string MatchOrNull(string input, string pattern)
    {
        var match = Regex.Match(input, pattern, RegexOptions.IgnoreCase);
        return match.Success ? match.Groups[1].Value.Trim() : null;
    }
}


var extractedFields = await ExtractFieldsUsingOpenAI(combinedText, log);
string documentType = await ClassifyDocumentType(combinedText, log);
string groupType = await ClassifyGroupType(combinedText, log);

var cleanedFields = PostProcessFields(extractedFields, log, fullText);
cleanedFields["documentType"] = documentType;
cleanedFields["groupType"] = groupType;

private static async Task<string> ClassifyDocumentType(string text, ILogger log)
{
    var client = new OpenAIClient(new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
        new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

    var chat = new ChatCompletionsOptions()
    {
        Messages =
        {
            new ChatMessage(ChatRole.System, "Classify the document as one of: Policy, Mortgage, Sale Deed, Commitment Package, Closing Disclosure, or Other. Return only the type as a single word."),
            new ChatMessage(ChatRole.User, text)
        },
        Temperature = 0.2f,
        MaxTokens = 20
    };

    try
    {
        var result = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
        return result.Value.Choices[0].Message.Content?.Trim();
    }
    catch (Exception ex)
    {
        log.LogWarning($"DocumentType classification failed: {ex.Message}");
        return "Unknown";
    }
}

private static async Task<string> ClassifyGroupType(string text, ILogger log)
{
    var client = new OpenAIClient(new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
        new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

    var chat = new ChatCompletionsOptions()
    {
        Messages =
        {
            new ChatMessage(ChatRole.System, "Based on the document content, classify its group as: TitlePackage, ClosingPackage, or Misc. Return only the group name."),
            new ChatMessage(ChatRole.User, text)
        },
        Temperature = 0.2f,
        MaxTokens = 20
    };

    try
    {
        var result = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
        return result.Value.Choices[0].Message.Content?.Trim();
    }
    catch (Exception ex)
    {
        log.LogWarning($"GroupType classification failed: {ex.Message}");
        return "Misc";
    }
}

{
  "@odata.type": "#Microsoft.Skills.Custom.WebApiSkill",
  "name": "#customExtractFields",
  "description": "Extract key fields from document",
  "context": "/document",
  "inputs": [
    {
      "name": "chunks",
      "source": "/document/pages"
    },
    {
      "name": "metadata_storage_path",
      "source": "/document/metadata_storage_path"
    }
  ],
  "outputs": [
    { "name": "policyNumber", "targetName": "policyNumber" },
    { "name": "orderNumber", "targetName": "orderNumber" },
    { "name": "propertyAddress", "targetName": "propertyAddress" },
    { "name": "closingDate", "targetName": "closingDate" },
    { "name": "borrowerName", "targetName": "borrowerName" },
    { "name": "sellerName", "targetName": "sellerName" },
    { "name": "buyerName", "targetName": "buyerName" },
    { "name": "policyDate", "targetName": "policyDate" },
    { "name": "documentType", "targetName": "documentType" },
    { "name": "groupType", "targetName": "groupType" },
    { "name": "blobUrl", "targetName": "blobUrl" },
    { "name": "containerName", "targetName": "containerName" }
  ],
  "uri": "https://<your-function-app>.azurewebsites.net/api/ExtractAndTagFields?code=<your-key>",
  "httpMethod": "POST",
  "timeout": "PT30S"
}


{
  "name": "document-index",
  "fields": [
    { "name": "id", "type": "Edm.String", "key": true, "searchable": false },
    { "name": "content", "type": "Edm.String", "searchable": true },
    { "name": "policyNumber", "type": "Edm.String", "searchable": true },
    { "name": "orderNumber", "type": "Edm.String", "searchable": true },
    { "name": "propertyAddress", "type": "Edm.String", "searchable": true },
    { "name": "closingDate", "type": "Edm.String", "searchable": true },
    { "name": "borrowerName", "type": "Edm.String", "searchable": true },
    { "name": "sellerName", "type": "Edm.String", "searchable": true },
    { "name": "buyerName", "type": "Edm.String", "searchable": true },
    { "name": "policyDate", "type": "Edm.String", "searchable": true },
    { "name": "documentType", "type": "Edm.String", "searchable": true, "facetable": true, "filterable": true },
    { "name": "groupType", "type": "Edm.String", "searchable": true, "facetable": true, "filterable": true },
    { "name": "blobUrl", "type": "Edm.String", "searchable": false },
    { "name": "containerName", "type": "Edm.String", "searchable": false },
    { "name": "summary", "type": "Edm.String", "searchable": true },
    { "name": "contentVector", "type": "Collection(Edm.Single)", "searchable": true, "dimensions": 1536, "vectorSearchProfile": "default-vector-profile" }
  ],
  "vectorSearch": {
    "algorithmConfigurations": [
      {
        "name": "default-config",
        "kind": "hnsw",
        "hnswParameters": {
          "m": 4,
          "efConstruction": 400,
          "efSearch": 500,
          "metric": "cosine"
        }
      }
    ],
    "profiles": [
      {
        "name": "default-vector-profile",
        "algorithmConfiguration": "default-config"
      }
    ]
  }
}





{
  "name": "document-indexer",
  "dataSourceName": "my-blob-datasource",
  "targetIndexName": "document-index",
  "skillsetName": "document-skillset",
  "schedule": {
    "interval": "PT4H",
    "startTime": "2024-04-01T00:00:00Z"
  },
  "parameters": {
    "configuration": {
      "dataToExtract": "contentAndMetadata",
      "imageAction": "generateNormalizedImages"
    }
  },
  "fieldMappings": [
    { "sourceFieldName": "metadata_storage_path", "targetFieldName": "id" }
  ],
  "outputFieldMappings": [
    { "sourceFieldName": "/document/content", "targetFieldName": "content" },
    { "sourceFieldName": "/document/policyNumber", "targetFieldName": "policyNumber" },
    { "sourceFieldName": "/document/orderNumber", "targetFieldName": "orderNumber" },
    { "sourceFieldName": "/document/propertyAddress", "targetFieldName": "propertyAddress" },
    { "sourceFieldName": "/document/closingDate", "targetFieldName": "closingDate" },
    { "sourceFieldName": "/document/borrowerName", "targetFieldName": "borrowerName" },
    { "sourceFieldName": "/document/sellerName", "targetFieldName": "sellerName" },
    { "sourceFieldName": "/document/buyerName", "targetFieldName": "buyerName" },
    { "sourceFieldName": "/document/policyDate", "targetFieldName": "policyDate" },
    { "sourceFieldName": "/document/documentType", "targetFieldName": "documentType" },
    { "sourceFieldName": "/document/groupType", "targetFieldName": "groupType" },
    { "sourceFieldName": "/document/blobUrl", "targetFieldName": "blobUrl" },
    { "sourceFieldName": "/document/containerName", "targetFieldName": "containerName" },
    { "sourceFieldName": "/document/summary", "targetFieldName": "summary" },
    { "sourceFieldName": "/document/contentVector", "targetFieldName": "contentVector" }
  ]
}


cleanedFields["policyNumber"] = extractedFields.TryGetValue("policyNumber", out var pn) ? pn : null;
cleanedFields["orderNumber"] = extractedFields.TryGetValue("orderNumber", out var on) ? on : null;
cleanedFields["propertyAddress"] = extractedFields.TryGetValue("propertyAddress", out var pa) ? pa : null;
cleanedFields["closingDate"] = extractedFields.TryGetValue("closingDate", out var cd) ? cd : null;
cleanedFields["borrowerName"] = extractedFields.TryGetValue("borrowerName", out var bn) ? bn : null;
cleanedFields["sellerName"] = extractedFields.TryGetValue("sellerName", out var sn) ? sn : null;
cleanedFields["buyerName"] = extractedFields.TryGetValue("buyerName", out var byn) ? byn : null;
cleanedFields["policyDate"] = extractedFields.TryGetValue("policyDate", out var pd) ? pd : null;

string text = data.TryGetValue("content", out var inputText) ? inputText.ToString() : string.Empty;
string fullText = text;
string limitedText = text.Length > 5000 ? text[..5000] : text;



string mergedText = data?["text"]?.ToString() ?? string.Empty;
var chunks = SplitIntoChunks(mergedText, 2000);

Dictionary<string, object> extractedFields = null;
string limitedText = string.Empty;

foreach (var chunk in chunks)
{
    limitedText = chunk.Length > 3000 ? chunk[..3000] : chunk;
    extractedFields = await ExtractFieldsUsingOpenAI(limitedText, log);
    if (ContainsImportantFields(extractedFields)) break;
}

string fullText = mergedText;

private static List<string> SplitIntoChunks(string text, int chunkSize)
{
    var chunks = new List<string>();
    for (int i = 0; i < text.Length; i += chunkSize)
    {
        int length = Math.Min(chunkSize, text.Length - i);
        chunks.Add(text.Substring(i, length));
    }
    return chunks;
}

private static bool ContainsImportantFields(Dictionary<string, object> fields)
{
    string[] keys = { "policyNumber", "orderNumber", "propertyAddress", "borrowerName", "sellerName", "buyerName", "policyDate", "closingDate" };
    return keys.Any(k => fields.ContainsKey(k) && fields[k] != null);
}


Those backticks (`\``) will break parsing.

---

## ✅ How to Fix It

### ✅ Step 1: Clean the response before parsing

```csharp
string content = result.Value.Choices[0].Message.Content?.Trim();

// Remove markdown/code block if present
if (content.StartsWith("```"))
{
    int start = content.IndexOf("{");
    int end = content.LastIndexOf("}");
    if (start >= 0 && end > start)
    {
        content = content.Substring(start, end - start + 1);
    }
}

// Optionally: Remove prefix text like “Here is the JSON:”
if (content.Contains("{") && !content.TrimStart().StartsWith("{"))
{
    content = content.Substring(content.IndexOf("{"));
}

private static async Task<Dictionary<string, object>> SafeExtractFields(OpenAIClient client, ChatCompletionsOptions options, ILogger log)
{
    for (int attempt = 1; attempt <= 3; attempt++)
    {
        try
        {
            var result = await client.GetChatCompletionsAsync("gpt-35-turbo", options);
            var json = result.Value.Choices[0].Message.Content;
            return JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
        }
        catch (RequestFailedException ex) when (ex.Status == 429)
        {
            log.LogWarning($"Rate limit hit. Attempt {attempt}/3. Retrying in 60s...");
            await Task.Delay(TimeSpan.FromSeconds(60));
        }
        catch (RequestFailedException ex) when (ex.Message.Contains("tokens"))
        {
            log.LogError("Token limit exceeded. Consider chunking or trimming input.");
            throw;
        }
        catch (Exception ex)
        {
            log.LogError($"Unexpected error on attempt {attempt}: {ex.Message}");
            throw;
        }
    }
result = await Task.Run(async () => await client.GetChatCompletionsAsync("gpt-35-turbo", chat))
                      .WaitAsync(TimeSpan.FromSeconds(20));
    log.LogError("All retry attempts failed.");
    return new Dictionary<string, object>();
}

 { "sourceFieldName": "/document/policyNumber", "targetFieldName": "policyNumber" },
  { "sourceFieldName": "/document/orderNumber", "targetFieldName": "orderNumber" },
  { "sourceFieldName": "/document/propertyAddress", "targetFieldName": "propertyAddress" },
  { "sourceFieldName": "/document/closingDate", "targetFieldName": "closingDate" },
  { "sourceFieldName": "/document/borrowerName", "targetFieldName": "borrowerName" },
  { "sourceFieldName": "/document/sellerName", "targetFieldName": "sellerName" },
  { "sourceFieldName": "/document/buyerName", "targetFieldName": "buyerName" },
  { "sourceFieldName": "/document/policyDate", "targetFieldName": "policyDate" },
  { "sourceFieldName": "/document/documentType", "targetFieldName": "documentType" },
  { "sourceFieldName": "/document/groupType", "targetFieldName": "groupType" },
  { "sourceFieldName": "/document/blobUrl", "targetFieldName": "blobUrl" },
  { "sourceFieldName": "/document/containerName", "targetFieldName": "containerName" },
  { "sourceFieldName": "/document/summary", "targetFieldName": "summary" },
  
  { "sourceFieldName": "/document/metadata_storage_path", "targetFieldName": "chunk_id" },
  { "sourceFieldName": "/document/parent_id", "targetFieldName": "parent_id" },
  { "sourceFieldName": "/document/mergedText", "targetFieldName": "chunk" },
  { "sourceFieldName": "/document/title", "targetFieldName": "title" }



private static string NormalizeAddress(string address)
{
    if (string.IsNullOrWhiteSpace(address)) return null;
    string lower = address.ToLowerInvariant();
    string noPunctuation = Regex.Replace(lower, "[^a-z0-9\\s]", "");
    string trimmed = Regex.Replace(noPunctuation, "\\s+", "-").Trim('-');
    return trimmed;
}

// Normalize propertyAddress to create propertyKey
string rawAddress = extracted.ContainsKey("propertyAddress") ? extracted["propertyAddress"]?.ToString() ?? "" : "";
string propertyKey = NormalizeAddress(rawAddress);
cleaned["propertyKey"] = propertyKey;

{
  "name": "propertyKey",
  "type": "Edm.String",
  "searchable": true,
  "filterable": true,
  "facetable": true,
  "retrievable": true
}

