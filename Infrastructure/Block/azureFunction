using System.Text.RegularExpressions;
using Azure;
using Azure.AI.OpenAI;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using System.Net.Http;

public static class ExtractAndTagFields
{
    [FunctionName("ExtractAndTagFields")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
        var input = JObject.Parse(requestBody);
        var record = input["values"]?[0];
        string recordId = record?["recordId"]?.ToString();

        var data = record?["data"] as JObject;
        var chunks = data?["chunks"]?.ToObject<List<string>>() ?? new List<string>();
        string fullText = string.Join("\n\n", chunks);
        string limitedText = fullText.Length > 3000 ? fullText[..3000] : fullText;

        var extractedFields = await ExtractFieldsUsingOpenAI(limitedText, log);
        string documentType = await ClassifyDocumentType(limitedText, log);
        string groupType = await ClassifyGroupType(limitedText, log);
        string blobPath = data?["metadata_storage_path"]?.ToString();
        string containerName = !string.IsNullOrWhiteSpace(blobPath) ? new Uri(blobPath).Segments[1].TrimEnd('/') : null;

        var cleanedFields = PostProcessFields(extractedFields, log, fullText);
        cleanedFields["documentType"] = documentType;
        cleanedFields["groupType"] = groupType;
        cleanedFields["blobUrl"] = blobPath;
        cleanedFields["containerName"] = containerName;

        var response = new
        {
            values = new[]
            {
                new
                {
                    recordId = recordId,
                    data = cleanedFields
                }
            }
        };

        return new OkObjectResult(response);
    }

    private static async Task<Dictionary<string, object>> ExtractFieldsUsingOpenAI(string text, ILogger log)
    {
        var client = new OpenAIClient(
            new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
            new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

        var chat = new ChatCompletionsOptions()
        {
            Messages =
            {
                new ChatMessage(ChatRole.System, "Extract the following fields if present: policyNumber, orderNumber, propertyAddress, closingDate, borrowerName, sellerName, buyerName, policyDate. Return only a JSON object with those keys."),
                new ChatMessage(ChatRole.User, text)
            },
            Temperature = 0.3f,
            MaxTokens = 512
        };

        try
        {
            var completion = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
            var json = completion.Value.Choices[0].Message.Content;
            return JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
        }
        catch (Exception ex)
        {
            log.LogWarning($"OpenAI call failed: {ex.Message}");
            return new();
        }
        private static async Task<string> ClassifyDocumentType(string text, ILogger log)
    {
        var client = new OpenAIClient(new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
            new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

        var chat = new ChatCompletionsOptions()
        {
            Messages =
            {
                new ChatMessage(ChatRole.System, "Classify the document as one of: Policy, Mortgage, Sale Deed, Commitment Package, Closing Disclosure, or Other. Return only the type."),
                new ChatMessage(ChatRole.User, text)
            },
            Temperature = 0.2f,
            MaxTokens = 20
        };

        try
        {
            var result = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
            return result.Value.Choices[0].Message.Content?.Trim();
        }
        catch (Exception ex)
        {
            log.LogWarning($"DocumentType classification failed: {ex.Message}");
            return "Unknown";
        }
    }

    private static async Task<string> ClassifyGroupType(string text, ILogger log)
    {
        var client = new OpenAIClient(new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
            new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

        var chat = new ChatCompletionsOptions()
        {
            Messages =
            {
                new ChatMessage(ChatRole.System, "Based on the document content, classify its group as: TitlePackage, ClosingPackage, or Misc. Return only the group name."),
                new ChatMessage(ChatRole.User, text)
            },
            Temperature = 0.2f,
            MaxTokens = 20
        };

        try
        {
            var result = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
            return result.Value.Choices[0].Message.Content?.Trim();
        }
        catch (Exception ex)
        {
            log.LogWarning($"GroupType classification failed: {ex.Message}");
            return "Misc";
        }
    }


    private static Dictionary<string, object> PostProcessFields(Dictionary<string, object> extracted, ILogger log, string rawText)
    {
        var cleaned = new Dictionary<string, object>();

        // Copy over extracted fields directly
        foreach (var key in new[] { "policyNumber", "orderNumber", "propertyAddress", "closingDate", "borrowerName", "sellerName", "buyerName", "policyDate" })
        {
            cleaned[key] = extracted.ContainsKey(key) ? extracted[key] : null;
        }

        // Fallback regex
        if (!string.IsNullOrWhiteSpace(rawText))
        {
            cleaned["policyNumber"] ??= MatchOrNull(rawText, "Policy\\s*Number[:\\-\\s]*([\\w\\-/]+)");
            cleaned["orderNumber"] ??= MatchOrNull(rawText, "Order\\s*Number[:\\-\\s]*([\\w\\-/]+)");
            cleaned["propertyAddress"] ??= MatchOrNull(rawText, "Property\\s*Address[:\\-\\s]*(.+?)(\\n|$)");
            cleaned["borrowerName"] ??= MatchOrNull(rawText, "Borrower[:\\-\\s]*(.+?)(\\n|$)");
            cleaned["buyerName"] ??= MatchOrNull(rawText, "Buyer[:\\-\\s]*(.+?)(\\n|$)");
            cleaned["sellerName"] ??= MatchOrNull(rawText, "Seller[:\\-\\s]*(.+?)(\\n|$)");
            cleaned["closingDate"] ??= MatchOrNull(rawText, "Closing\\s*Date[:\\-\\s]*([\\d]{2}/[\\d]{2}/[\\d]{4})");
            cleaned["policyDate"] ??= MatchOrNull(rawText, "Policy\\s*Date[:\\-\\s]*([\\d]{2}/[\\d]{2}/[\\d]{4})");
        }

        return cleaned;
    }

    private static string MatchOrNull(string input, string pattern)
    {
        var match = Regex.Match(input, pattern, RegexOptions.IgnoreCase);
        return match.Success ? match.Groups[1].Value.Trim() : null;
    }
}


var extractedFields = await ExtractFieldsUsingOpenAI(combinedText, log);
string documentType = await ClassifyDocumentType(combinedText, log);
string groupType = await ClassifyGroupType(combinedText, log);

var cleanedFields = PostProcessFields(extractedFields, log, fullText);
cleanedFields["documentType"] = documentType;
cleanedFields["groupType"] = groupType;

private static async Task<string> ClassifyDocumentType(string text, ILogger log)
{
    var client = new OpenAIClient(new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
        new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

    var chat = new ChatCompletionsOptions()
    {
        Messages =
        {
            new ChatMessage(ChatRole.System, "Classify the document as one of: Policy, Mortgage, Sale Deed, Commitment Package, Closing Disclosure, or Other. Return only the type as a single word."),
            new ChatMessage(ChatRole.User, text)
        },
        Temperature = 0.2f,
        MaxTokens = 20
    };

    try
    {
        var result = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
        return result.Value.Choices[0].Message.Content?.Trim();
    }
    catch (Exception ex)
    {
        log.LogWarning($"DocumentType classification failed: {ex.Message}");
        return "Unknown";
    }
}

private static async Task<string> ClassifyGroupType(string text, ILogger log)
{
    var client = new OpenAIClient(new Uri(Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT")),
        new AzureKeyCredential(Environment.GetEnvironmentVariable("AZURE_OPENAI_KEY")));

    var chat = new ChatCompletionsOptions()
    {
        Messages =
        {
            new ChatMessage(ChatRole.System, "Based on the document content, classify its group as: TitlePackage, ClosingPackage, or Misc. Return only the group name."),
            new ChatMessage(ChatRole.User, text)
        },
        Temperature = 0.2f,
        MaxTokens = 20
    };

    try
    {
        var result = await client.GetChatCompletionsAsync("gpt-35-turbo", chat);
        return result.Value.Choices[0].Message.Content?.Trim();
    }
    catch (Exception ex)
    {
        log.LogWarning($"GroupType classification failed: {ex.Message}");
        return "Misc";
    }
}

{
  "@odata.type": "#Microsoft.Skills.Custom.WebApiSkill",
  "name": "#customExtractFields",
  "description": "Extract key fields from document",
  "context": "/document",
  "inputs": [
    {
      "name": "chunks",
      "source": "/document/pages"
    },
    {
      "name": "metadata_storage_path",
      "source": "/document/metadata_storage_path"
    }
  ],
  "outputs": [
    { "name": "policyNumber", "targetName": "policyNumber" },
    { "name": "orderNumber", "targetName": "orderNumber" },
    { "name": "propertyAddress", "targetName": "propertyAddress" },
    { "name": "closingDate", "targetName": "closingDate" },
    { "name": "borrowerName", "targetName": "borrowerName" },
    { "name": "sellerName", "targetName": "sellerName" },
    { "name": "buyerName", "targetName": "buyerName" },
    { "name": "policyDate", "targetName": "policyDate" },
    { "name": "documentType", "targetName": "documentType" },
    { "name": "groupType", "targetName": "groupType" },
    { "name": "blobUrl", "targetName": "blobUrl" },
    { "name": "containerName", "targetName": "containerName" }
  ],
  "uri": "https://<your-function-app>.azurewebsites.net/api/ExtractAndTagFields?code=<your-key>",
  "httpMethod": "POST",
  "timeout": "PT30S"
}
